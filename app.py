import os
from flask import Flask, render_template, redirect, request, url_for, flash, jsonify
from flask_pymongo import PyMongo
from bson.objectid import ObjectId

app = Flask(__name__)

app.config['MONGO_DBNAME'] = 'cook_book'
app.config['MONGO_URI'] = 'mongodb://thurco:youtube123@ds129540.mlab.com:29540/cook_book'

mongo = PyMongo(app)


## function for returning recipes with filters
def get_recipes(filters={}, page_number=1):
    recipes = mongo.db.recipe.find(filters).skip((page_number -1) * 6).sort("upvotes", -1).limit(6)
    
    return recipes
## function to return the count of recipes with specific filters. Returns an integer.   
def count_recipes(filters):
    count = mongo.db.recipe.count(filters)
    return count

## function for taking a long string from a textarea and splitting it into a list.
def make_list(data):
    spliced_on_new_line = data.splitlines()
    spliced_list = []
    for ingredient in spliced_on_new_line:
        ingredient = ingredient.split(",")
        spliced_list.extend(ingredient)
        finished_list = filter(None, spliced_list) ##Filter empty list items
    return finished_list
    
@app.route("/")
def index():
    
    ## queries for database summary on home page
    beef_count = mongo.db.recipe.count({"meal_category": "Beef"})
    chicken_count = mongo.db.recipe.count({"meal_category": "Chicken"})
    lamb_count = mongo.db.recipe.count({"meal_category": "Lamb"})
    seafood_count = mongo.db.recipe.count({"meal_category": "Seafood"})
    vegetarian_count = mongo.db.recipe.count({"meal_category": "Vegetarian"})
    pork_count = mongo.db.recipe.count({"meal_category": "Pork"})
    dessert_count = mongo.db.recipe.count({"meal_category": "Dessert"})
    
    cheap_meal = mongo.db.recipe.count({"price": "Cheap"})
    medium_meal = mongo.db.recipe.count({"price": "Medium"})
    expensive_meal = mongo.db.recipe.count({"price": "Expensive"})
    
    fast_meal = mongo.db.recipe.count({"time": "Fast"})
    everyday_meal = mongo.db.recipe.count({"time": "Medium"})
    long_meal = mongo.db.recipe.count({"time": "Long"})
    
    return render_template('index.html', pork=pork_count, dessert=dessert_count, 
                                         vegetarian=vegetarian_count, seafood=seafood_count, 
                                         lamb=lamb_count, chicken=chicken_count, 
                                         beef=beef_count, cheap=cheap_meal, medium=medium_meal,
                                         expensive=expensive_meal, fast=fast_meal, everyday=everyday_meal, 
                                         Long=long_meal)
    

##main page with the links to all recipes and options to filter/search
@app.route("/recipes")

def recipes():
    filters = {}
    return render_template("recipes.html", 
    recipes=get_recipes(), count=count_recipes(filters))
    


## HTML for paginated cards."getURL" function in cookbook.js uses this to get the html generated by this url and
## dynamically changes what 'page' is displayed on /recipes
@app.route("/recipes/gethtml/<page_number>")
def recipe_page(page_number):
    page_number = int(page_number)
    filters = {}
    return render_template("recipe_card.html",  recipes=get_recipes(page_number=page_number), count=count_recipes(filters))


@app.route("/recipes/gethtml/<meal_type>/<time>/<price>/<page_number>")
def filtered_recipe_page(meal_type, time, price, page_number):
    page_number = int(page_number)
    filters = {}
    if meal_type != "none":
        filters["meal_category"] = meal_type
    if time != "none":
        filters["time"] = time
    if price != "none":
        filters["price"] = price
    
    return render_template("recipe_card.html",  recipes=get_recipes(filters=filters, page_number=page_number), count=count_recipes(filters))

##page to add new recipes to the database
@app.route("/add_recipe")
def add_recipe():
    categories = mongo.db.meal_category.find()
    category_list = [category for category in categories]
    
    return render_template("add_recipe.html", categories=category_list)
    
@app.route("/insert_recipe", methods=["POST"])
def insert_recipe():
    recipes = mongo.db.recipe
    ingredients_list = make_list(request.form["ingredients"])
    ## all values from the textboxes with a name of 'step'
    steps_list = request.form.getlist('step')
    
    
    recipe_dict = {
        "username": request.form["username"],
        "title": request.form["title"],
        "meal_category" : request.form["meal_category"],
        "time": request.form["time"],
        "price": request.form["price"],
        "calories": request.form["calories"],
        "ingredients": ingredients_list,
        "steps": steps_list,
        "upvotes": 1
    }
    recipes.insert_one(recipe_dict)
    
    return redirect(url_for('new_recipe'))
 
## Redirect to new recipe upon submission
@app.route("/new_recipe")
def new_recipe():
    ## find the newest recipe
    recipe = mongo.db.recipe.find_one(sort=[( '_id', -1 )])
    
    return render_template("single_recipe.html", recipe=recipe)
    
    
## individual recipe pages based on recipe_id
@app.route("/<recipe_id>")
def recipe_id(recipe_id):
    
    recipe = mongo.db.recipe.find_one({"_id": ObjectId(recipe_id)})
    
    return render_template("single_recipe.html", recipe=recipe)
    
## function to delete a recipe from the database
@app.route("/<recipe_id>/delete")
def delete_recipe(recipe_id):
    
    recipe = mongo.db.recipe.find_one({"_id": ObjectId(recipe_id)})
    mongo.db.recipe.remove({"_id": ObjectId(recipe_id)})
    
    return redirect(url_for('recipes'))
    
@app.route("/<recipe_id>/edit")
def edit_recipe(recipe_id):
    
    recipe = mongo.db.recipe.find_one({"_id": ObjectId(recipe_id)})
    categories = mongo.db.meal_category.find()
    category_list = [category for category in categories]
    
    return render_template("edit_recipe.html", categories=category_list, recipe=recipe)

## function to edit a recipe in the database
@app.route("/<recipe_id>/update", methods=["POST"])
def update_recipe(recipe_id):
   
    ## updated ingredients in ingredients textbox
    ingredients_list = make_list(request.form["ingredients"])
    ## all values from the textboxes with a name of 'step'
    steps_list = request.form.getlist('step')
    filtered_steps_list = filter(None, steps_list) ##users can submit an empty text box by removing
                                                   ##the text from it. This should remove those from the steps list.
    recipe_dict = {
        
        "title": request.form["title"],
        "meal_category" : request.form["meal_category"],
        "time": request.form["time"],
        "price": request.form["price"],
        "calories": request.form["calories"],
        "ingredients": ingredients_list,
        "steps": filtered_steps_list
    }
    
    mongo.db.recipe.update_one({"_id": ObjectId(recipe_id)}, {"$set": recipe_dict})
    return redirect("/" + recipe_id)

## upvote function
@app.route("/<recipe_id>/upvote", methods=["POST"])
def upvote(recipe_id):
    
    recipe = mongo.db.recipe.find_one({"_id": ObjectId(recipe_id)}, {"upvotes": 1})
    new_values = { "$set": {"upvotes": recipe['upvotes'] + 1} }
    
    mongo.db.recipe.update_one({"_id": ObjectId(recipe_id)}, new_values)
        
    return redirect("/" + recipe_id)
    
## downvote function
@app.route("/<recipe_id>/downvote", methods=["POST"])
def downvote(recipe_id):
    recipe = mongo.db.recipe.find_one({"_id": ObjectId(recipe_id)}, {"upvotes": 1})
    new_values = { "$set": {"upvotes": recipe['upvotes'] - 1} }
    
    mongo.db.recipe.update_one({"_id": ObjectId(recipe_id)}, new_values)
    
    return redirect("/" + recipe_id)

@app.route("/user/<username>")
def user_page(username):
    
    recipes = mongo.db.recipe.find({"username": username}).sort( "upvotes", -1).limit(12)
    count = mongo.db.recipe.count({"username": username})
    
    upvote_count = mongo.db.recipe.aggregate([
        {
            "$match": {"username": username}
        },
        {
            "$group": {
                "_id": username,
                "count": {
                    "$sum": "$upvotes"
                }
            }
        }
    ])
    
    def format_count(d):
        return d['count']
    upvote_count_final = [format_count(d) for d in upvote_count]
    
    try:   
        return render_template("user_page.html",recipes=recipes, username=username, 
                                count=count, upvotes=upvote_count_final[0])
    except Exception as e:
        return render_template("500.html",username=username)                         




@app.route("/db_summary")
def db_summary():
    
    return render_template("db_summary.html")
    

def get_graph_data(key, meal_type, time, price):
    
    filters = {}
    if meal_type != "none":
        filters["meal_category"] = meal_type
    if time != "none":
        filters["time"] = time
    if price != "none":
        filters["price"] = price
    
    
    result = mongo.db.recipe.aggregate([
        {
            "$match": filters
        },
        {
            "$group": {
                "_id": "$" + key,
                "count": {
                    "$sum": 1
                }
            }
        }
    ])
    
    def transform(d):
        return [d['_id'], d['count']]
    data_list = [transform(d) for d in result]
    data_list.insert(0, ["Meal Type", "Count"])
    return data_list
    
@app.route("/db_summary/graph_data/<key>/<meal_type>/<time>/<price>")
def graph_data(key, meal_type, time, price):
    
    return jsonify(data=get_graph_data(key, meal_type, time, price))

if __name__ == '__main__':
    app.run(host=os.environ.get('IP'), 
            port=int(os.environ.get('PORT')),
            debug=True)
